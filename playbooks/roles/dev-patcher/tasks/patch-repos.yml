---
- name: Fetch patch number
  set_fact:
    patchnumber: "{{ patch[0] }}"

- name: Fetch patch revision
  set_fact:
    patchrevision: "{{ patch[1] | default('current') }}"

- name: Get patch {{ patchnumber }} details
  uri:
    url: "{{ dev_patcher_baseurl }}/?q={{ patchnumber }}&o=ALL_REVISIONS"
    return_content: yes
    body_format: json
  register: thispatch

# Gerrit starts its http response with ")]}'". Strip that to have a valid json.
- name: Parse patch details
  set_fact:
    jsoncontent: "{{ thispatch.content.replace(pattern_to_replace,'') | from_json | first }}"
  vars:
    pattern_to_replace: ")]}'"

- name: Apply {{ patchnumber }} - {{ jsoncontent['subject'] }}
  shell: |
    set -o errexit
    git fetch {{ jsoncontent['revisions'][revision]['fetch']['anonymous http']['url'] }} {{ jsoncontent['revisions'][revision]['fetch']['anonymous http']['ref'] }}
    git cherry-pick FETCH_HEAD
  args:
    chdir: "{{ upstream_repos_clone_folder }}/{{ project }}"
  vars:
    # Use latest revision of no revision was specified
    revision: "{{ (patchrevision != 'current') | ternary(patchrevision, jsoncontent['current_revision']) }}"
    project: "{{ jsoncontent['project'] }}"
  changed_when: true
